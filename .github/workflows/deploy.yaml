name: deploy

on:
  push:
    branches:
      - "main"
      - "next"

env:
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
  RELEASE_NAME: briofy-web
  RELEASE_NAMESPACE: briofy-web
  RELEASE_DOMAIN: briofy.net
  NEXT_RELEASE_DOMAIN: next.briofy.net

jobs:
  build:
    uses: ./.github/workflows/build.yaml
  helm:
    needs: [build]
    runs-on: 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v3

      - name: Lowecase the repo name
        run: |
          echo "REPOSITORY_NAME=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

      - name: Declare short commit id
        id: vars
        shell: bash
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: "Set RELEASE_DOMAIN to next if branch is next"
        if: env.BRANCH_NAME == 'next'
        run: echo 'RELEASE_DOMAIN=${{ env.NEXT_RELEASE_DOMAIN }}' >>$GITHUB_ENV

      - name: "Set RELEASE_NAME if to next branch is next"
        if: env.BRANCH_NAME == 'next'
        run: echo 'RELEASE_NAME=next-${{ env.RELEASE_NAME }}' >>$GITHUB_ENV

      - name: "Set IMG_NAME variable"
        run: echo 'IMG_NAME=ghcr.io/${{ env.REPOSITORY_NAME }}' >>$GITHUB_ENV

      - name: "Set IMG_TAG variable"
        run: echo 'IMG_TAG=${{ env.BRANCH_NAME }}-${{ steps.vars.outputs.sha_short }}' >>$GITHUB_ENV

      - name: Run Helm and Deploy
        uses: WyriHaximus/github-action-helm3@v3
        with:
          exec: helm upgrade --install 
            "${{ github.event.repository.name }}.${{ env.BRANCH_NAME }}"
            --namespace ${{ env.RELEASE_NAMESPACE }}
            --set name="${{ env.RELEASE_NAME }}"
            --set domainName="${{ env.RELEASE_DOMAIN }}"
            --set image.repository="${{ env.IMG_NAME }}"
            --set image.tag="${{ env.IMG_TAG }}"
            --set tls.enabled="true"
            --set tls.clusterIssuer="cf-letsencrypt"
            --set tls.secretName="prod-${{ env.RELEASE_NAME }}-net-tls"
            --create-namespace
            .ci/chart
          kubeconfig: '${{ secrets.KUBECONFIG }}'
